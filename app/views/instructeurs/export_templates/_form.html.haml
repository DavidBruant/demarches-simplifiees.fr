#export_template-edit.fr-my-4w
  .fr-mb-6w
    = render Dsfr::AlertComponent.new(state: :info, title: "Nouvel éditeur de modèle d'export", heading_level: 'h3') do |c|
      - c.with_body do
        Cette page permet d'éditer un modèle d'export et ainsi personnaliser le contenu des exports (pour l'instant,
        uniquement au format zip). Ainsi, vous pouvez notamment normaliser le nom des pièces jointes.
        Essayez-le et donnez-nous votre avis
        en nous envoyant un email à #{mail_to(CONTACT_EMAIL, subject: "Editeur de modèle d'export")}.

.fr-grid-row.fr-grid-row--gutters
  .fr-col-12.fr-col-md-8
    = form_with url: form_url, model: @export_template, local: true, data: { turbo: 'true', controller: 'autosubmit' } do |f|

      = render Dsfr::InputComponent.new(form: f, attribute: :name, input_type: :text_field)

      - if groupe_instructeurs.many?
        .fr-input-group
          = f.label :groupe_instructeur_id, class: 'fr-label' do
            = f.object.class.human_attribute_name(:groupe_instructeur_id)
            = render EditableChamp::AsteriskMandatoryComponent.new
            %span.fr-hint-text
              Avec quel groupe instructeur souhaitez-vous partager ce modèle d'export ?
          = f.collection_select :groupe_instructeur_id, groupe_instructeurs, :id, :label, {}, class: 'fr-select'
      - else
        = f.hidden_field :groupe_instructeur_id

      = f.hidden_field :kind

      %div{ data: { controller: 'tiptap', 'tiptap-attributes-value': { spellcheck: false }.to_json } }
        = f.label :dossier_folder, class: "fr-label" do
          = f.object.class.human_attribute_name(:dossier_folder)
          = render EditableChamp::AsteriskMandatoryComponent.new
          %span.fr-hint-text
            = t('activerecord.attributes.export_template.hints.dossier_folder')
        .tiptap-editor{ data: { tiptap_target: 'editor' } }
          = f.hidden_field "[dossier_folder][template]", data: { tiptap_target: 'input' }, value: @export_template.dossier_folder.fetch('template').to_json
        .fr-mt-2w= render TagsButtonListComponent.new(tags: { nil => @export_template.tags })

      %div{ data: { controller: 'tiptap hide-target', 'tiptap-attributes-value': { spellcheck: false }.to_json } }
        .fr-toggle.fr-toggle--label-left
          = check_box_tag "export_template[export_pdf][enabled]", true, @export_template.export_pdf.fetch('enabled'), class: 'fr-toggle__input', id: "export_template_export_pdf_enabled", data: { 'hide-target_target': 'source' }
          = label_tag "export_template_export_pdf_enabled", f.object.class.human_attribute_name(:export_pdf), class: 'fr-toggle__label flex align-center', data: { 'fr-checked-label': 'Exporté', 'fr-unchecked-label': 'Ignoré' }

        %div{ class: class_names( 'fr-hidden': !@export_template.export_pdf.fetch('enabled') ), data: { hide_target_target: 'toHide' } }
          .tiptap-editor{ data: { tiptap_target: 'editor' } }
            = f.hidden_field "[export_pdf][template]", data: { tiptap_target: 'input' }, value: @export_template.export_pdf.fetch('template').to_json
          .fr-mt-2w= render TagsButtonListComponent.new(tags: { nil => @export_template.tags })

      - if @exportable_pjs.any?
        .fr-h3.fr-mt-4w Pieces justificatives

        - @exportable_pjs.each do |pj|
          %div{ data: { controller: 'tiptap hide-target', 'tiptap-attributes-value': { spellcheck: false }.to_json } }
            - export_pj = @export_template.pj(pj.stable_id)

            = hidden_field_tag "export_template[pjs][][stable_id]", pj.stable_id

            .fr-toggle.fr-toggle--label-left
              = check_box_tag "export_template[pjs][][enabled]", true, export_pj&.fetch('enabled'), class: 'fr-toggle__input', id: "export_template_pjs_#{pj.stable_id}_enabled", data: { 'hide-target_target': 'source' }
              = label_tag "export_template_pjs_#{pj.stable_id}_enabled", pj.libelle, class: 'fr-toggle__label flex align-center', data: { 'fr-checked-label': 'Exporté', 'fr-unchecked-label': 'Ignoré' }

            %div{ class: class_names( 'fr-hidden': !export_pj&.fetch('enabled') ), data: { hide_target_target: 'toHide' } }
              .tiptap-editor{ data: { tiptap_target: 'editor' } }
                = hidden_field_tag "export_template[pjs][][template]", "#{export_pj&.fetch('template')&.to_json}" , data: { tiptap_target: 'input' }
              .fr-mt-2w= render TagsButtonListComponent.new(tags: { nil => @export_template.pj_tags })

      .fixed-footer
        .fr-container
          %ul.fr-btns-group.fr-btns-group--inline-md
            %li
              %input.hidden{ type: 'submit', formaction: preview_instructeur_export_templates_path, data: { autosubmit_target: 'submitter' }, formnovalidate: 'true', formmethod: 'get' }
              = f.button "Enregistrer", class: "fr-btn", data: { turbo: 'false' }
            %li
              = link_to "Annuler", instructeur_procedure_path(@procedure), class: "fr-btn fr-btn--secondary"
            - if @export_template.persisted?
              %li
                = link_to "Supprimer", instructeur_export_template_path(@export_template, procedure_id: @procedure.id), method: :delete, data: { confirm: "Voulez-vous vraiment supprimer ce modèle ? Il sera supprimé pour tous les instructeurs du groupe"}, class: "fr-btn fr-btn--secondary"
  - sample_dossier = @procedure.dossier_for_preview(current_instructeur)
  .fr-col-12.fr-col-md-4.fr-background-alt--blue-france
    = render partial: 'preview', locals: { dossier: sample_dossier, export_template: @export_template, procedure: @procedure }
